@page
@model CecilifierApplication
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@functions
{
}

@{
    ViewData["Title"] = "Cecilifier";
    var fromGist = Model.FromGist;
}
<br/>
<div>
        <div class="form-group">
            <label class="control-label">Enter your C# code</label>
            <textarea id="_csharpcode"></textarea>
        </div>
        
        <button type="submit" id="sendbutton">Cecilifier your code!</button>
        
        <div class="form-group">
            <label class="control-label">Cecilified Code</label>
            <textarea id="_cecilifiedcode"></textarea>
            <div style="font-family:Lucida Console; font-size: 2">Editor powered by <a href="https://github.com/codemirror/codemirror">CodeMirror</a></div>
        </div>
</div>

<script>
    var websocket;
    var sendButton;
    var cecilifiedCode;
    var csharpCode;
    
    var csharpeditor = CodeMirror.fromTextArea(
        document.getElementById("_csharpcode"), 
        {
            lineNumbers: true,
            matchBrackets: true,
            mode: "text/x-csharp",
            theme: "blackboard"
        });

    var editor = CodeMirror.fromTextArea(
        document.getElementById("_cecilifiedcode"), 
        {
            lineNumbers: true,
            matchBrackets: true,
            mode: "text/x-csharp",
            theme: "darcula"
        });

    
    initializeWebSocket();
    
    var hasError = @((Model.ErrorAccessingGist != null).ToString().ToLower());
    if (hasError) {
        setError("@Model.ErrorAccessingGist");    
    }
    else {
        var fromGist = "@fromGist";
        csharpeditor.setValue(
            fromGist
            .replace(/&quot;/g, '"')
            .replace(/&gt;/g, '>')
            .replace(/&lt;/g, '<')
            .replace(/&#x27;/g, "'")
            .replace(/&#x2B;/g, '+')
            .replace(/&#x38;/g, '&')
            );
    }
    
    function clearError() {
        setErrInternal(null);
    }
    
    function setError(str) {
        setErrInternal(str);
    }
    
    function setErrInternal(errorMsg) {
        var errorDiv = document.getElementById("cecilifier_error");
        
        if (errorMsg == null) {
            errorDiv.style.opacity = 0;
            errorDiv.style.position = "absolute";
            errorDiv.children[1].innerHTML = "";
        } else {
            errorDiv.style.opacity = 1;
            errorDiv.style.position = "relative";
            errorDiv.children[1].innerHTML = errorMsg;
            errorDiv.style.display = "block";
        }
    }
    
    function initializeWebSocket() {
        var scheme = document.location.protocol === "https:" ? "wss" : "ws";
        var port = document.location.port ? (":" + document.location.port) : "";
        var connectionURL = scheme + "://" + document.location.hostname + port + "/ws" ;
        
        websocket = new WebSocket(connectionURL);
        
        sendButton = document.getElementById("sendbutton");
        cecilifiedCode = document.getElementById("_cecilifiedcode");
        csharpCode = document.getElementById("_csharpcode");
        
        sendbutton.onclick = function() {
            if (!websocket || websocket.readyState !== WebSocket.OPEN) {
                alert("socket not connected");
                return;
            }
            clearError();
            websocket.send(csharpeditor.getValue());
        };
        
        websocket.onopen = function (event) {
        };
        
        websocket.onclose = function (event) {
        };
        
        websocket.onerror = function(event) {
            console.error("WebSocket error observed:", event);
        };
        
        websocket.onmessage = function (event) {
            // this is where we get the cecilified code back...
            var response = JSON.parse(event.data);
            if (response.status == 0) {
                editor.setValue(response.cecilifiedCode);
            } else if (response.status == 1) {
                setError(response.syntaxError.replace(/\n/g, "<br/>"));
            } else if (response.status == 2) {
                setError("Something went wrong. Please report the following error in the google group or in the git repository:\n" + response.error);
            }
        };
    }
</script>